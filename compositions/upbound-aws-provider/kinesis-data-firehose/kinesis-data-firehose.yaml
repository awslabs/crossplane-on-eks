
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: kinesisfirehose.upbound.awsblueprints.io
  annotations:
    argocd.argoproj.io/sync-wave: "-10"
  labels:
    awsblueprints.io/provider: aws
    awsblueprints.io/environment: dev
    kinesis.awsblueprints.io/service: firehose
spec:
  compositeTypeRef:
    apiVersion: awsblueprints.io/v1alpha1
    kind: XKinesisFirehose
  patchSets:
    - name: common-fields
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.deletionPolicy
          toFieldPath: spec.deletionPolicy
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.tags
          toFieldPath: spec.forProvider.tags
          policy:
            mergeOptions:
              appendSlice: true
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels
          toFieldPath: metadata.labels
          policy:
            mergeOptions:
              keepMapValues: true
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.name
          toFieldPath: metadata.annotations[crossplane.io/external-name]
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.providerConfigName
          toFieldPath: spec.providerConfigRef.name
  resources:
    - name: kinesis-firehose
      base:
        apiVersion: firehose.aws.upbound.io/v1beta1
        kind: DeliveryStream
        spec: {}
      patches:
        - type: PatchSet
          patchSetName: common-fields
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-kinesis"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.name
          toFieldPath: spec.forProvider.name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.destination
          toFieldPath: spec.forProvider.destination
        - type: FromCompositeFieldPath
          fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.destinationId
          toFieldPath: spec.forProvider.destinationId
        - type: FromCompositeFieldPath
          fromFieldPath: spec.elasticsearchConfiguration
          toFieldPath: spec.forProvider.elasticsearchConfiguration
        - type: FromCompositeFieldPath
          fromFieldPath: spec.extendedS3Configuration
          toFieldPath: spec.forProvider.extendedS3Configuration
        - type: FromCompositeFieldPath
          fromFieldPath: spec.httpEndpointConfiguration
          toFieldPath: spec.forProvider.httpEndpointConfiguration
        - type: FromCompositeFieldPath
          fromFieldPath: spec.kinesisSourceConfiguration
          toFieldPath: spec.forProvider.kinesisSourceConfiguration
        - type: FromCompositeFieldPath
          fromFieldPath: spec.redshiftConfiguration
          toFieldPath: spec.forProvider.redshiftConfiguration
        - type: FromCompositeFieldPath
          fromFieldPath: spec.s3Configuration
          toFieldPath: spec.forProvider.s3Configuration
        - type: FromCompositeFieldPath
          fromFieldPath: spec.serverSideEncryption
          toFieldPath: spec.forProvider.serverSideEncryption
        - type: FromCompositeFieldPath
          fromFieldPath: spec.splunkConfiguration
          toFieldPath: spec.forProvider.splunkConfiguration
        - type: FromCompositeFieldPath
          fromFieldPath: spec.tags
          toFieldPath: spec.forProvider.tags
        - type: FromCompositeFieldPath
          fromFieldPath: spec.versionId
          toFieldPath: spec.forProvider.versionId
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.id
          toFieldPath: status.kinesisArn
        - type: ToCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: status.kinesisName
    - name: kinesis-role
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: Role
        spec:
          forProvider:
            assumeRolePolicy: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "firehose.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }
      patches:
        - type: PatchSet
          patchSetName: common-fields
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-kinesis-role"
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.arn
          toFieldPath: status.kinesisRoleArn
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.id
          toFieldPath: status.kinesisRoleName
        - type: FromCompositeFieldPath
          fromFieldPath: spec.permissionsBoundaryArn
          toFieldPath: spec.forProvider.permissionsBoundary
