# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xamazonekss-cas.cluster.awsblueprints.io
  labels:
    awsblueprints.io/provider: aws
    awsblueprints.io/environment: dev
    awsblueprints.io/subnet-selection: label
    crossplane.io/xrd: xamazonekss.cluster.awsblueprints.io
    service: eks-cas
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  compositeTypeRef:
    apiVersion: cluster.awsblueprints.io/v1alpha1
    kind: XAmazonEks
  patchSets:
    - name: common-parameters
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.providerConfigName
          toFieldPath: spec.providerConfigRef.name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.deletionPolicy
          toFieldPath: spec.deletionPolicy
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.region
          toFieldPath: spec.forProvider.region
    - name: k8s-config
      patches:
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.providerConfigRef.name
          policy:
            fromFieldPath: Required
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.deletionPolicy
          toFieldPath: spec.deletionPolicy
  resources:
    - name: vpc
      base:
        apiVersion: network.awsblueprints.io/v1alpha1
        kind: XVpcSubnet
        spec:
          compositionSelector:
            matchLabels:
              awsblueprints.io/provider: aws
              awsblueprints.io/environment: dev
              awsblueprints.io/network-id: "false"
              service: vpcsubnet
          parameters:
            #vpc input
            vpc-Name: xplane-vpc
            vpc-cidrBlock: "10.20.0.0/17"   # 32768 IPs
            vpc-amazonProvidedIpv6CidrBlock: false
            #public subnet1
            publicSubnet1-cidrBlock: "10.20.0.0/21" # 2048 IPs
            publicSubnet1-availabilityZone: eu-west-1a
            #public subnet2
            publicSubnet2-cidrBlock: "10.20.8.0/21" # 2048 IPs
            publicSubnet2-availabilityZone: eu-west-1b
            #public subnet3
            publicSubnet3-cidrBlock: "10.20.16.0/21" # 2048 IPs
            publicSubnet3-availabilityZone: eu-west-1c
            #private subnet1
            privateSubnet1-cidrBlock: "10.20.64.0/21" # 2048 IPs
            privateSubnet1-availabilityZone: eu-west-1a
            #private subnet2
            privateSubnet2-cidrBlock: "10.20.72.0/21" # 2048 IPs
            privateSubnet2-availabilityZone: eu-west-1b
            #private subnet3
            privateSubnet3-cidrBlock: "10.20.80.0/21" # 2048 IPs
            privateSubnet3-availabilityZone: eu-west-1c
      patches:
        - fromFieldPath: spec.resourceConfig
          toFieldPath: spec.resourceConfig
        - fromFieldPath: spec.resourceConfig.region
          toFieldPath: spec.parameters.publicSubnet1-availabilityZone
          transforms:
            - type: string
              string:
                fmt: "%sa"
        - fromFieldPath: spec.resourceConfig.region
          toFieldPath: spec.parameters.publicSubnet2-availabilityZone
          transforms:
            - type: string
              string:
                fmt: "%sb"
        - fromFieldPath: spec.resourceConfig.region
          toFieldPath: spec.parameters.publicSubnet3-availabilityZone
          transforms:
            - type: string
              string:
                fmt: "%sc"
        - fromFieldPath: spec.resourceConfig.region
          toFieldPath: spec.parameters.privateSubnet1-availabilityZone
          transforms:
            - type: string
              string:
                fmt: "%sa"
        - fromFieldPath: spec.resourceConfig.region
          toFieldPath: spec.parameters.privateSubnet2-availabilityZone
          transforms:
            - type: string
              string:
                fmt: "%sb"
        - fromFieldPath: spec.resourceConfig.region
          toFieldPath: spec.parameters.privateSubnet3-availabilityZone
          transforms:
            - type: string
              string:
                fmt: "%sc"
    - name: eks-cluster
      base:
        apiVersion: eks.aws.crossplane.io/v1beta1
        kind: Cluster
        metadata:
          labels:
            role: controlplane
        spec:
          forProvider:
            version:
            roleArnSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplane
            resourcesVpcConfig:
              endpointPrivateAccess:
              endpointPublicAccess:
              subnetIdSelector:
                matchLabels:
                  type: subnet
          writeConnectionSecretToRef:
            namespace: crossplane-system
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: spec.parameters.version
          toFieldPath: spec.forProvider.version
        - fromFieldPath: spec.parameters.endpointPrivateAccess
          toFieldPath: spec.forProvider.resourcesVpcConfig.endpointPrivateAccess
        - fromFieldPath: spec.parameters.endpointPublicAccess
          toFieldPath: spec.forProvider.resourcesVpcConfig.endpointPublicAccess
        - fromFieldPath: metadata.uid
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-eks-cluster-conn"
        - fromFieldPath: spec.writeConnectionSecretToRef.namespace
          toFieldPath: spec.writeConnectionSecretToRef.namespace
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.identity.oidc.issuer
          toFieldPath: status.oidcIssuerUrl
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.name
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.resourcesVpcConfig.subnetIdSelector.matchLabels[crossplane.io/claim-name]
          policy:
            fromFieldPath: Required
        - type: ToCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: status.clusterName
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.identity.oidc.issuer
          toFieldPath: status.oidcEKS
          transforms:
            - type: string
              string:
                type: TrimPrefix
                trim: 'https://'
      connectionDetails:
        - name: cluster-ca
          fromConnectionSecretKey: clusterCA
        - name: apiserver-endpoint
          fromConnectionSecretKey: endpoint
        - name: kubeconfig
          fromConnectionSecretKey: kubeconfig
    - name: eks-cluster-role
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        metadata:
          labels:
            role: controlplane
        spec:
          forProvider:
            assumeRolePolicyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "eks.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
              }
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "control-plane-%s"
    - name: eks-cluster-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplane
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "eks-cluster-policy-%s"
    - name: eks-service-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSServicePolicy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplane
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "eks-service-policy-%s"
    - name: eks-vpcresource-controller-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplane
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "eks-vpc-policy-%s"
    - name: eks-oidc
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: OpenIDConnectProvider
        spec:
          forProvider:
            clientIDList:
              - sts.amazonaws.com
            thumbprintList:
              - "9e99a48a9960b14926bb7f3b02e22da2b0ab7280" # may change in the future
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: status.oidcIssuerUrl
          toFieldPath: spec.forProvider.url
          policy:
            fromFieldPath: Required
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "oidc-provider-%s"
# EKS Managed Node groups
    - name: eks-managed-nodegroups
      base:
        apiVersion: eks.aws.crossplane.io/v1alpha1
        kind: NodeGroup
        spec:
          forProvider:
            amiType:
            clusterNameSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplane
            nodeRoleSelector:
              matchControllerRef: true
              matchLabels:
                role: managed-nodegroup
            subnetSelector:
              matchLabels:
                visibility: private
            scalingConfig:
              minSize:
              desiredSize:
              maxSize:
            capacityType:
            instanceTypes:
              - m5.large
              - m5.xlarge
              - m5.2xlarge
              - m5.4xlarge
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: spec.managedNodeGroups.minSize
          toFieldPath: spec.forProvider.scalingConfig.minSize
        - fromFieldPath: spec.managedNodeGroups.maxSize
          toFieldPath: spec.forProvider.scalingConfig.maxSize
        - fromFieldPath: spec.managedNodeGroups.desiredSize
          toFieldPath: spec.forProvider.scalingConfig.desiredSize
        - fromFieldPath: spec.managedNodeGroups.desiredSize
          toFieldPath: spec.forProvider.scalingConfig.desiredSize
        - fromFieldPath: spec.managedNodeGroups.capacityType
          toFieldPath: spec.forProvider.capacityType
        - fromFieldPath: spec.managedNodeGroups.instanceTypes
          toFieldPath: spec.forProvider.instanceTypes
        - fromFieldPath: spec.managedNodeGroups.amiType
          toFieldPath: spec.forProvider.amiType
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.subnetSelector.matchLabels[crossplane.io/claim-name]
          policy:
            fromFieldPath: Required
    - name: eks-managed-nodegroup-iam-role
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        metadata:
          labels:
            role: managed-nodegroup
        spec:
          forProvider:
            assumeRolePolicyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
              }
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.arn
          toFieldPath: status.accountID
          transforms:
            - type: string
              string:
                type: Regexp
                regexp:
                  match: 'arn:aws:iam::(\d+):.*'
                  group: 1
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.arn
          toFieldPath: status.nodeGroupArn
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "managed-node-%s"
    - name: eks-managed-nodegroup-worker-node-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role:  managed-nodegroup
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "eks-worker-ng-%s"
    - name: eks-managed-nodegroup-container-registry-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: managed-nodegroup
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "eks-worker-ecr-%s"
    - name: eks-managed-nodegroup-ssm-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: managed-nodegroup
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "eks-worker-ssm-%s"
    - name: eks-managed-nodegroup-cni-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: managed-nodegroup
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "eks-worker-cni-%s"
    # CSI addon configuration
    - name: csi-role
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        metadata:
          labels:
            role: csi-role
        spec:
          forProvider:
            name: ""
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.arn
          toFieldPath: status.roleArnCSI
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: status.accountID
            - fromFieldPath: status.oidcEKS
            - fromFieldPath: status.oidcEKS
            - fromFieldPath: status.oidcEKS
            strategy: string
            #TODO need to create a k8s service account called projectname-oss-serviceaccount
            string:
              fmt: |
                 {
                    "Version": "2012-10-17",
                    "Statement": [{
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                    },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                    "%s:aud": "sts.amazonaws.com",
                    "%s:sub": "system:serviceaccount:kube-system:ebs-csi-controller-sa"
                                    }
                                }
                      }]
                 }
          toFieldPath: spec.forProvider.assumeRolePolicyDocument
          policy:
            fromFieldPath: Required
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: metadata.labels[crossplane.io/claim-name]
            strategy: string
            string:
              fmt: "csi-%s"
          toFieldPath: spec.forProvider.name
    - name: csi-policy-attachment
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: csi-role
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "eks-worker-csi-%s"
    - name: eks-csi-driver
      base:
        apiVersion: eks.aws.crossplane.io/v1alpha1
        kind: Addon
        metadata:
        spec:
          forProvider:
            addonName: aws-ebs-csi-driver
            addonVersion: v1.18.0-eksbuild.1
            clusterNameSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplane  
            resolveConflicts: OVERWRITE
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "eks-worker-csi-%s"
        - type: FromCompositeFieldPath
          fromFieldPath: status.roleArnCSI
          toFieldPath: spec.forProvider.serviceAccountRoleARN
          policy:
            fromFieldPath: Required
    # Crossplane Kubernetes ProviderConfig for this EKS Cluster
    - name: eks-k8s-provider-config
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: ProviderConfig
        metadata:
          name: k8s-project-name
        spec:
          credentials:
            source: Secret
            secretRef:
              namespace: crossplane-system
              name: ""
              key: kubeconfig
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.uid
          toFieldPath: spec.credentials.secretRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-eks-cluster-conn"
          policy:
            fromFieldPath: Required
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.name
          policy:
            fromFieldPath: Required
      readinessChecks:
        - type: None
    # Crossplane Helm ProviderConfig for this EKS Cluster
    - name: eks-helm-provider-config
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: ProviderConfig
        metadata:
          name: helm-project-name
        spec:
          credentials:
            source: Secret
            secretRef:
              namespace: crossplane-system
              name: ""
              key: kubeconfig
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.uid
          toFieldPath: spec.credentials.secretRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-eks-cluster-conn"
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.name
          policy:
            fromFieldPath: Required
      readinessChecks:
        - type: None
    # Ensure admins can access this cluster by managing the aws-auth CM
    - name: aws-auth-configmap
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          deletionPolicy: Orphan
          managementPolicy: ObserveCreateUpdate
          providerConfigRef:
            name: "invalid"
          forProvider:
            manifest:
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: aws-auth
                namespace: kube-system
      patches:
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "eks-aws-auth-%s"
          policy:
            fromFieldPath: Required
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.providerConfigRef.name
          policy:
            fromFieldPath: Required
        - type: CombineFromComposite
          combine:
            strategy: string
            variables:
              - fromFieldPath: status.nodeGroupArn
              - fromFieldPath: status.accountID
              - fromFieldPath: spec.parameters.adminRole
            string:
              fmt: |
                - groups:
                  - system:bootstrappers
                  - system:nodes
                  rolearn: %s
                  username: system:node:{{EC2PrivateDNSName}}
                - groups:
                  - system:masters
                  rolearn: arn:aws:iam::%s:role/%s
                  username: admin
          toFieldPath: spec.forProvider.manifest.data.mapRoles
      readinessChecks:
        - type: None
    # Cluster AutoScaler Policy and Roles
    - name: cas-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Policy
        metadata:
          labels:
            role: cas
        spec:
          forProvider:
            name: ""
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: status.clusterName
            strategy: string
            string:
              fmt: |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "autoscaling:SetDesiredCapacity",
                                "autoscaling:TerminateInstanceInAutoScalingGroup"
                            ],
                            "Resource": "*",
                            "Condition": {
                                "StringEquals": {
                                    "aws:ResourceTag/k8s.io/cluster-autoscaler/%s": "owned"
                                }
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "autoscaling:DescribeAutoScalingInstances",
                                "autoscaling:DescribeAutoScalingGroups",
                                "ec2:DescribeLaunchTemplateVersions",
                                "autoscaling:DescribeTags",
                                "autoscaling:DescribeLaunchConfigurations",
                                "ec2:DescribeInstanceTypes"
                            ],
                            "Resource": "*"
                        }
                    ]
                }
          toFieldPath: spec.forProvider.document
          policy:
            fromFieldPath: Required
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: metadata.labels[crossplane.io/claim-name]
            strategy: string
            string:
              fmt: "cluster-as-%s"
          toFieldPath: spec.forProvider.name
    - name: cas-cluster-as-role
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        metadata:
          labels:
            role: cas-role
        spec:
          forProvider:
            name: ""
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.arn
          toFieldPath: status.roleArnCAS
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: status.accountID
            - fromFieldPath: status.oidcEKS
            - fromFieldPath: status.oidcEKS
            - fromFieldPath: status.oidcEKS
            strategy: string
            #TODO need to create a k8s service account called projectname-oss-serviceaccount
            string:
              fmt: |
                 {
                    "Version": "2012-10-17",
                    "Statement": [{
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                    },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                    "%s:aud": "sts.amazonaws.com",
                    "%s:sub": "system:serviceaccount:kube-system:cluster-autoscaler"
                                    }
                                }
                      }]
                 }
          toFieldPath: spec.forProvider.assumeRolePolicyDocument
          policy:
            fromFieldPath: Required
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: metadata.labels[crossplane.io/claim-name]
            strategy: string
            string:
              fmt: "CAS-%s"
          toFieldPath: spec.forProvider.name
    - name: cas-role-policy-attachment
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArnSelector:
              matchControllerRef: true              
              matchLabels:
                role: cas
            roleNameSelector:
              matchControllerRef: true              
              matchLabels:
                role: cas-role
      patches:
        - type: PatchSet
          patchSetName: common-parameters
    # Cluster AutoScaler deployment
    - name: cas-sa
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                labels:
                  k8s-addon: cluster-autoscaler.addons.k8s.io
                  k8s-app: cluster-autoscaler
                  app.kubernetes.io/managed-by: crossplane
                name: cluster-autoscaler
                namespace: kube-system
      patches:
        - type: PatchSet
          patchSetName: k8s-config
        - fromFieldPath: status.roleArnCAS
          toFieldPath: spec.forProvider.manifest.metadata.annotations[eks.amazonaws.com/role-arn]
          policy:
            fromFieldPath: Required
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: metadata.labels[crossplane.io/claim-name]
            strategy: string
            string:
              fmt: "cas-sa-%s"
          toFieldPath: metadata.name
          policy:
            fromFieldPath: Required
    - name: cas-cluster-role
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: rbac.authorization.k8s.io/v1
              kind: ClusterRole
              metadata:
                name: cluster-autoscaler
                labels:
                  k8s-addon: cluster-autoscaler.addons.k8s.io
                  k8s-app: cluster-autoscaler
              rules:
                - apiGroups: [""]
                  resources: ["events", "endpoints"]
                  verbs: ["create", "patch"]
                - apiGroups: [""]
                  resources: ["pods/eviction"]
                  verbs: ["create"]
                - apiGroups: [""]
                  resources: ["pods/status"]
                  verbs: ["update"]
                - apiGroups: [""]
                  resources: ["endpoints"]
                  resourceNames: ["cluster-autoscaler"]
                  verbs: ["get", "update"]
                - apiGroups: [""]
                  resources: ["nodes"]
                  verbs: ["watch", "list", "get", "update"]
                - apiGroups: [""]
                  resources:
                    - "namespaces"
                    - "pods"
                    - "services"
                    - "replicationcontrollers"
                    - "persistentvolumeclaims"
                    - "persistentvolumes"
                  verbs: ["watch", "list", "get"]
                - apiGroups: ["extensions"]
                  resources: ["replicasets", "daemonsets"]
                  verbs: ["watch", "list", "get"]
                - apiGroups: ["policy"]
                  resources: ["poddisruptionbudgets"]
                  verbs: ["watch", "list"]
                - apiGroups: ["apps"]
                  resources: ["statefulsets", "replicasets", "daemonsets"]
                  verbs: ["watch", "list", "get"]
                - apiGroups: ["storage.k8s.io"]
                  resources: ["storageclasses", "csinodes", "csidrivers", "csistoragecapacities"]
                  verbs: ["watch", "list", "get"]
                - apiGroups: ["batch", "extensions"]
                  resources: ["jobs"]
                  verbs: ["get", "list", "watch", "patch"]
                - apiGroups: ["coordination.k8s.io"]
                  resources: ["leases"]
                  verbs: ["create"]
                - apiGroups: ["coordination.k8s.io"]
                  resourceNames: ["cluster-autoscaler"]
                  resources: ["leases"]
                  verbs: ["get", "update"]
      patches:
        - type: PatchSet
          patchSetName: k8s-config
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: metadata.labels[crossplane.io/claim-name]
            strategy: string
            string:
              fmt: "cas-cluster-role-%s"
          toFieldPath: metadata.name
          policy:
            fromFieldPath: Required
    - name: cas-role
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: rbac.authorization.k8s.io/v1
              kind: Role
              metadata:
                name: cluster-autoscaler
                namespace: kube-system
                labels:
                  k8s-addon: cluster-autoscaler.addons.k8s.io
                  k8s-app: cluster-autoscaler
              rules:
                - apiGroups: [""]
                  resources: ["configmaps"]
                  verbs: ["create","list","watch"]
                - apiGroups: [""]
                  resources: ["configmaps"]
                  resourceNames: ["cluster-autoscaler-status", "cluster-autoscaler-priority-expander"]
                  verbs: ["delete", "get", "update", "watch"]
      patches:
        - type: PatchSet
          patchSetName: k8s-config
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: metadata.labels[crossplane.io/claim-name]
            strategy: string
            string:
              fmt: "cas-role-%s"
          toFieldPath: metadata.name
          policy:
            fromFieldPath: Required
    - name: cas-cluster-role-binding
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: rbac.authorization.k8s.io/v1
              kind: ClusterRoleBinding
              metadata:
                name: cluster-autoscaler
                labels:
                  k8s-addon: cluster-autoscaler.addons.k8s.io
                  k8s-app: cluster-autoscaler
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: ClusterRole
                name: cluster-autoscaler
              subjects:
                - kind: ServiceAccount
                  name: cluster-autoscaler
                  namespace: kube-system
      patches:
        - type: PatchSet
          patchSetName: k8s-config
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: metadata.labels[crossplane.io/claim-name]
            strategy: string
            string:
              fmt: "cas-cluster-role-binding-%s"
          toFieldPath: metadata.name
          policy:
            fromFieldPath: Required
    - name: cas-role-binding
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: rbac.authorization.k8s.io/v1
              kind: RoleBinding
              metadata:
                name: cluster-autoscaler
                namespace: kube-system
                labels:
                  k8s-addon: cluster-autoscaler.addons.k8s.io
                  k8s-app: cluster-autoscaler
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: Role
                name: cluster-autoscaler
              subjects:
                - kind: ServiceAccount
                  name: cluster-autoscaler
                  namespace: kube-system
      patches:
        - type: PatchSet
          patchSetName: k8s-config
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: metadata.labels[crossplane.io/claim-name]
            strategy: string
            string:
              fmt: "cas-role-binding-%s"
          toFieldPath: metadata.name
          policy:
            fromFieldPath: Required
    - name: cas-deployment
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: cas-deployment
        spec:
          forProvider:
            manifest:
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: cluster-autoscaler
                namespace: kube-system
                labels:
                  app: cluster-autoscaler
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: cluster-autoscaler
                template:
                  metadata:
                    labels:
                      app: cluster-autoscaler
                    annotations:
                      cluster-autoscaler.kubernetes.io/safe-to-evict: 'false'
                      prometheus.io/scrape: 'true'
                      prometheus.io/port: '8085'
                  spec:
                    priorityClassName: system-cluster-critical
                    securityContext:
                      runAsNonRoot: true
                      runAsUser: 65534
                      fsGroup: 65534
                      seccompProfile:
                        type: RuntimeDefault
                    serviceAccountName: cluster-autoscaler
                    containers:
                      - image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.24.1
                        name: cluster-autoscaler
                        resources:
                          limits:
                            cpu: 100m
                            memory: 600Mi
                          requests:
                            cpu: 100m
                            memory: 600Mi
                        command:
                          - ./cluster-autoscaler
                          - --v=4
                          - --stderrthreshold=info
                          - --cloud-provider=aws
                          - --skip-nodes-with-local-storage=false
                          - --expander=least-waste
                          - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/clustername
                          - --balance-similar-node-groups
                          - --skip-nodes-with-system-pods=false
                        volumeMounts:
                          - name: ssl-certs
                            mountPath: /etc/ssl/certs/ca-certificates.crt #/etc/ssl/certs/ca-bundle.crt for Amazon Linux Worker Nodes
                            readOnly: true
                        imagePullPolicy: "Always"
                        securityContext:
                          allowPrivilegeEscalation: false
                          capabilities:
                            drop:
                              - ALL
                          readOnlyRootFilesystem: true
                    volumes:
                      - name: ssl-certs
                        hostPath:
                          path: "/etc/ssl/certs/ca-bundle.crt"
      patches:
        - type: PatchSet
          patchSetName: k8s-config
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: metadata.labels[crossplane.io/claim-name]
            strategy: string
            string:
              fmt: "cas-deployment-%s"
          toFieldPath: metadata.name
          policy:
            fromFieldPath: Required
        - fromFieldPath: status.clusterName
          toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].command[6]
          transforms:
            - type: string
              string:
                fmt: "--node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/%s"
