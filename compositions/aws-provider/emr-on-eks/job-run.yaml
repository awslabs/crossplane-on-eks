# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: job-run.emr-containers.awsblueprints.io
  labels:
    awsblueprints.io/environment: dev
    awsblueprints.io/type: job-run
spec:
  publishConnectionDetailsWithStoreConfigRef:
    name: default
  compositeTypeRef:
    apiVersion: awsblueprints.io/v1alpha1
    kind: XEMRContainer
  patchSets:
    - name: common-fields-composition
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig
          toFieldPath: spec.resourceConfig
    - name: common-fields
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.providerConfigName
          toFieldPath: spec.providerConfigRef.name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.deletionPolicy
          toFieldPath: spec.deletionPolicy
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.region
          toFieldPath: spec.forProvider.region
  resources:
    - name: irsa-role-only
      base:
        apiVersion: awsblueprints.io/v1alpha1
        kind: XIRSA
        spec:
          compositionSelector:
            matchLabels:
              awsblueprints.io/environment: dev
              awsblueprints.io/type: role-only
          awsAccountID: ""
          eksOIDC: ""
          serviceAccountName: emr-containers*
      patches:
        - type: PatchSet
          patchSetName: common-fields-composition
        - type: FromCompositeFieldPath
          fromFieldPath: status.accountId
          toFieldPath: spec.awsAccountID
          policy:
            fromFieldPath: Required
        - type: FromCompositeFieldPath
          fromFieldPath: spec.eksOIDC
          toFieldPath: spec.eksOIDC
          policy:
            fromFieldPath: Required
        - type: FromCompositeFieldPath
          fromFieldPath: spec.permissionsBoundaryArn
          toFieldPath: spec.permissionsBoundaryArn
        - type: ToCompositeFieldPath
          fromFieldPath: status.roleName
          toFieldPath: status.roleName
        - type: ToCompositeFieldPath
          fromFieldPath: status.roleArn
          toFieldPath: status.roleArn
    - name: read-policy-entrypoint
      base:
        apiVersion: awsblueprints.io/v1alpha1
        kind: XIAMPolicy
        spec:
          compositionSelector:
            matchLabels:
              iam.awsblueprints.io/policy-type: read
              iam.awsblueprints.io/service: s3-bucket
              iam.awsblueprints.io/attach-policy: "true"
          resourceArn: ""
      patches:
        - type: PatchSet
          patchSetName: common-fields-composition
        - type: ToCompositeFieldPath
          fromFieldPath: status.policyArn
          toFieldPath: status.readPolicyArn
        # entrypoint must be a s3 bucket for this composition
        - fromFieldPath: spec.jobParams.sparkEntryPoint
          toFieldPath: spec.resourceArn
          transforms:
            - type: string
              string:
                type: Regexp
                regexp:
                  match: 's3://([^/]*)/.*'
                  group: 1
            - type: string
              string:
                type: Format
                fmt: "arn:aws:s3:::%s"
        - type: FromCompositeFieldPath
          fromFieldPath: status.roleName
          toFieldPath: spec.roleName
    - name: read-policy
      base:
        apiVersion: awsblueprints.io/v1alpha1
        kind: XIAMPolicy
        spec:
          compositionSelector:
            matchLabels:
              iam.awsblueprints.io/policy-type: read
              iam.awsblueprints.io/service: s3-bucket
              iam.awsblueprints.io/attach-policy: "true"
          resourceArn: ""
      patches:
        - type: PatchSet
          patchSetName: common-fields-composition
        - type: ToCompositeFieldPath
          fromFieldPath: status.policyArn
          toFieldPath: status.readPolicyArn
        - fromFieldPath: status.bucketArn
          toFieldPath: spec.resourceArn
        - type: FromCompositeFieldPath
          fromFieldPath: status.roleName
          toFieldPath: spec.roleName
        - type: ToCompositeFieldPath
          fromFieldPath: status.policyArn
          toFieldPath: status.accountId
          transforms:
            - type: string
              string:
                type: Regexp
                regexp:
                  match: 'arn:aws:iam::(\d+):.*'
                  group: 1
    - name: write-policy
      base:
        apiVersion: awsblueprints.io/v1alpha1
        kind: XIAMPolicy
        spec:
          compositionSelector:
            matchLabels:
              iam.awsblueprints.io/policy-type: write
              iam.awsblueprints.io/service: s3-bucket
              iam.awsblueprints.io/attach-policy: "true"
          resourceArn: ""
      patches:
        - type: PatchSet
          patchSetName: common-fields-composition
        - type: ToCompositeFieldPath
          fromFieldPath: status.policyArn
          toFieldPath: status.writePolicyArn
        - fromFieldPath: status.bucketArn
          toFieldPath: spec.resourceArn
        - type: FromCompositeFieldPath
          fromFieldPath: status.roleName
          toFieldPath: spec.roleName
    - name: s3-bucket
      base:
        apiVersion: s3.aws.crossplane.io/v1beta1
        kind: Bucket
        spec:
          deletionPolicy: Orphan # For EMR job data retention
          forProvider:
            acl: private
            serverSideEncryptionConfiguration:
              rules:
                - applyServerSideEncryptionByDefault:
                    sseAlgorithm: AES256
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.providerConfigName
          toFieldPath: spec.providerConfigRef.name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.region
          toFieldPath: spec.forProvider.locationConstraint
        - type: ToCompositeFieldPath
          fromFieldPath: metadata.annotations[crossplane.io/external-name]
          toFieldPath: status.bucketName
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.arn
          toFieldPath: status.bucketArn
    - name: job-run
      base:
        apiVersion: emrcontainers.aws.crossplane.io/v1alpha1
        kind: JobRun
        spec:
          forProvider:
            region: us-west-2
            executionRoleARN: ""
            jobDriver:
              sparkSubmitJobDriver:
                entryPoint: ""
                entryPointArguments: []
                sparkSubmitParameters: ""
            releaseLabel: ""
            virtualClusterId: ""
      patches:
        - type: PatchSet
          patchSetName: common-fields
        - type: FromCompositeFieldPath
          fromFieldPath: spec.jobParams.sparkEntryPoint
          toFieldPath: spec.forProvider.jobDriver.sparkSubmitJobDriver.entryPoint
        - type: FromCompositeFieldPath
          fromFieldPath: spec.jobParams.sparkSubmitParameters
          toFieldPath: spec.forProvider.jobDriver.sparkSubmitJobDriver.sparkSubmitParameters
        - type: FromCompositeFieldPath
          fromFieldPath: spec.jobParams.release
          toFieldPath: spec.forProvider.releaseLabel
        - type: FromCompositeFieldPath
          fromFieldPath: spec.jobParams.virtualClusterId
          toFieldPath: spec.forProvider.virtualClusterId
        - type: FromCompositeFieldPath
          fromFieldPath: status.bucketName
          toFieldPath: spec.forProvider.jobDriver.sparkSubmitJobDriver.entryPointArguments[0] # We assume the first argument is always a S3 bucket.
          transforms:
            - type: string
              string:
                type: Format
                fmt: "s3://%s/job_output"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.jobParams.sparkEntryPointArgs
          toFieldPath: spec.forProvider.jobDriver.sparkSubmitJobDriver.entryPointArguments
          policy:
            mergeOptions:
              appendSlice: true
        - type: FromCompositeFieldPath
          fromFieldPath: status.roleArn
          toFieldPath: spec.forProvider.executionRoleARN
          policy:
            fromFieldPath: Required

